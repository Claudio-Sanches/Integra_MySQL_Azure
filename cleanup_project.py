"""
Script de limpeza do projeto para GitHub
Remove arquivos tempor√°rios e sens√≠veis
"""
import os
import shutil
import glob

def cleanup_project():
    """Remove arquivos tempor√°rios e prepara para GitHub"""
    print("üßπ LIMPEZA DO PROJETO PARA GITHUB")
    print("=" * 40)
    
    # Arquivos/pastas para remover
    items_to_remove = [
        # Cache Python
        "__pycache__",
        "*.pyc",
        "*.pyo",
        "*.pyd",
        
        # Logs
        "*.log",
        "logs/",
        
        # Tempor√°rios
        "*.tmp",
        "*.temp",
        "*~",
        "*.bak",
        
        # IDE
        ".vscode/settings.json",  # Manter apenas template
        ".idea/",
        
        # Sistema
        "Thumbs.db",
        ".DS_Store",
        
        # Backups locais
        "*_backup.*",
        "backup_*",
    ]
    
    removed_count = 0
    
    for pattern in items_to_remove:
        # Buscar arquivos/pastas que correspondem ao padr√£o
        matches = glob.glob(pattern, recursive=True)
        
        for item in matches:
            try:
                if os.path.isfile(item):
                    os.remove(item)
                    print(f"  üóëÔ∏è Removido arquivo: {item}")
                    removed_count += 1
                elif os.path.isdir(item):
                    shutil.rmtree(item)
                    print(f"  üìÅ Removida pasta: {item}")
                    removed_count += 1
            except Exception as e:
                print(f"  ‚ö†Ô∏è Erro ao remover {item}: {e}")
    
    print(f"\n‚úÖ Limpeza conclu√≠da: {removed_count} itens removidos")
    return removed_count

def secure_sensitive_files():
    """Protege arquivos sens√≠veis"""
    print(f"\nüîí VERIFICA√á√ÉO DE ARQUIVOS SENS√çVEIS")
    print("=" * 40)
    
    sensitive_files = [
        ".env",
        "config/settings.py",
        "credentials.json",
        "secrets.json",
    ]
    
    found_sensitive = []
    
    for file in sensitive_files:
        if os.path.exists(file):
            found_sensitive.append(file)
            print(f"  ‚ö†Ô∏è ARQUIVO SENS√çVEL ENCONTRADO: {file}")
    
    if found_sensitive:
        print(f"\n‚ùå ATEN√á√ÉO: {len(found_sensitive)} arquivo(s) sens√≠vel(is) encontrado(s)!")
        print("üîê Certifique-se de que est√£o no .gitignore antes do commit!")
        
        for file in found_sensitive:
            print(f"  üö® {file}")
    else:
        print(f"  ‚úÖ Nenhum arquivo sens√≠vel detectado")
    
    return found_sensitive

def create_env_template():
    """Cria template do arquivo .env para outros desenvolvedores"""
    template_content = """# ===============================================
# TEMPLATE - Configura√ß√µes do SQL Server Azure
# ===============================================
# INSTRU√á√ïES:
# 1. Copie este arquivo para .env
# 2. Substitua os valores pelos seus dados reais
# 3. NUNCA commite o arquivo .env real

# Servidor SQL Server (encontre no portal do Azure)
MYSQL_HOST=seu-servidor.database.windows.net

# Nome do banco de dados
MYSQL_DATABASE=seu-banco

# Usu√°rio (formato: usuario ou usuario@servidor)
MYSQL_USER=seu-usuario

# Senha do banco (MANTENHA SEGURA!)
MYSQL_PASSWORD=sua-senha-aqui

# Porta do SQL Server (padr√£o: 1433)
MYSQL_PORT=1433

# Certificado SSL (se necess√°rio)
MYSQL_SSL_CA=DigiCertGlobalRootCA.crt.pem
"""
    
    try:
        with open('.env.template', 'w', encoding='utf-8') as f:
            f.write(template_content)
        print(f"  ‚úÖ Criado: .env.template")
        return True
    except Exception as e:
        print(f"  ‚ùå Erro ao criar .env.template: {e}")
        return False

def create_vscode_settings():
    """Cria configura√ß√µes VS Code recomendadas"""
    vscode_settings = {
        "python.defaultInterpreterPath": "./venv/Scripts/python.exe",
        "python.linting.enabled": True,
        "python.linting.pylintEnabled": True,
        "python.formatting.provider": "black",
        "files.exclude": {
            "**/__pycache__": True,
            "**/*.pyc": True,
            ".env": True
        },
        "python.analysis.extraPaths": [
            "./config",
            "./database", 
            "./utils"
        ]
    }
    
    os.makedirs('.vscode', exist_ok=True)
    
    try:
        import json
        with open('.vscode/settings.json', 'w', encoding='utf-8') as f:
            json.dump(vscode_settings, f, indent=2)
        print(f"  ‚úÖ Criado: .vscode/settings.json")
        return True
    except Exception as e:
        print(f"  ‚ùå Erro ao criar configura√ß√µes VS Code: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ PREPARA√á√ÉO PARA GITHUB")
    print("=" * 50)
    
    # Executar limpeza
    cleanup_project()
    
    # Verificar arquivos sens√≠veis
    sensitive_files = secure_sensitive_files()
    
    # Criar templates
    print(f"\nüìù CRIA√á√ÉO DE TEMPLATES")
    print("=" * 30)
    create_env_template()
    create_vscode_settings()
    
    # Resumo final
    print(f"\nüéØ RESUMO DA PREPARA√á√ÉO")
    print("=" * 30)
    print(f"  üßπ Limpeza realizada")
    print(f"  üìù Templates criados")
    print(f"  üîí .gitignore recomendado dispon√≠vel")
    
    if sensitive_files:
        print(f"\n‚ùå A√á√ÉO NECESS√ÅRIA:")
        print(f"  üîê Verifique arquivos sens√≠veis antes do commit!")
    else:
        print(f"\n‚úÖ PROJETO PRONTO PARA GITHUB!")
    
    print(f"\nüöÄ PR√ìXIMOS PASSOS:")
    print(f"  1. Adicione o .gitignore")
    print(f"  2. Execute: git init")
    print(f"  3. Execute: git add .")
    print(f"  4. Execute: git commit -m 'Initial commit'")
    print(f"  5. Crie reposit√≥rio no GitHub")
    print(f"  6. Execute: git remote add origin <URL>")
    print(f"  7. Execute: git push -u origin main")